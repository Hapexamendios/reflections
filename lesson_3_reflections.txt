When would you want to use a remote repository rather than keeping all your work local?

You would want to use a remote repository in several situations. First, if you are 
working on more than just one machine. This way, you're not being forced to move
files back and forth between them. Second, if multiple people are working on a 
project together, a remote repository is likely necessary to avoid needing to 
manually pass files back and forth between computers and having an ever increasing
number of branches. Finally, a remote repository may be helpful in that it could
make it easy to pull files from what is essentially a remote host onto servers
that may run it, rather than having to use some other file transfer method.

Why might you want to always pull changes manually rather than having Git automatically 
stay up-to-date with your remote repository?

Always pulling changes manually will help to ensure that changes made on a remote
repo, such as those made by other people working on the same project, will not
overwrite what you may be working on at a given moment. 

Describe the differences between forks, clones, and branches. When would you use 
one instead of another?

When the fork operation is performed on github, this clones another repository from
their space on github onto your own. During this process, it also gives credit to this
user that you make this copy on github. Cloning is the process of making a copy of a
repository that's hosted on github onto your local machine. Branches are different
lines of code modifications within a single repository.

What is the benefit of having a copy of the last known state of the remote stored 
locally?

The benefit of having a copy of the last known state of the remote stored locally
is that you know from what historical point you're moving forward from, thus allowing
you to later know where branches may have been created by other collaborators on the
project while you were offline or only able to access the local copy.

How would you collaborate without using Git or GitHub? What would be easier, 
and what would be harder?

Without the use of git or github, it would be necessary to have a master file in
some location that is what is continously used and edited by only one person at 
a time. This would be somewhat easier in that merge conflicts likely wouldn't
ever occur, but it would result in an inability for multiple developers to code
on the same project at the same time, as well as higher risk in that whatever
was being changed would go from the edit zone directly into production. 