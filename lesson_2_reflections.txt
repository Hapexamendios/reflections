What happens when you initialize a repo? Why do you need to do it?

Initializing a repo creates a hidden .git folder, containing the metadata
that allows it to track changes in files, allowing version control. You need
to do it so that the hidden folder that tracks all this meta data is created.

How is the staging area different than the working directory and the repo?
What value do you think it offers?

The staging area is different in that it is a place where we can bundle 
together groups of files for a commit, and allow us to selectively commit 
changed files rather than being forced to commit all changes at once. The value
is in this selective commitment.

How can you use the staging area to make sure you have one commit per logical
change?

The staging area can be used to make sure you have one commit per logical change
by comparing it with the most recent commit to make sure only one thing is 
being changed between the versions.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

Situations in which branching can help organize would such as when you are 
working to create a new feature, or if several users within an organization were
each working to make new, different additions to the same code base. Branches
would help as they would allow each user to continue to make their additions
while not limiting the code to only one person working on it at a time.

How do the diagrams help you visualize the branch structure?

Diagrams help to visualize the branch structure as they help you to see which
branches are reachable and which are not based on your current location. Each
commit only points to its own parents, so other branches are not visible via the
log command, and if a commit isn't part of an existing branch, it's going to be
invisible.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

Merging two branches together effectively combines them into a single branch
from that point forward. We represent it in this way as the merged commit
effectively has two parents from that point forward.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges 
manually?

Automatic merging is useful in that it will allow multiple people within an
organization to all work together to make changes to the same code base. 
Merging automatically will same time and keep everyone moving with rapid 
velocity, but it has risks in that unintended results can occur such as some
functionality being lost or bugs being introduced. Due to this, it's a safe
bet to go back and perform testing after completing a merge. If you are the
only user making use of git, this is much safer. As such, it depends on the
organzation and how projects are being worked on.